// PRISMA: CREATE FOLDER STRUCTURE MANUALLY ‚≠êÔ∏è
// Instead of running the `npx prisma init` command, you can create the folder
// structure manually. This might be useful if you want more control over the 
// initialization process. Within your project root, create a new folder named 
// 'prisma' and within it, create a new file called `schema.prisma`.

// PRISMA: DEFINE YOUR DATA SOURCE AND GENERATOR ‚≠êÔ∏è
// In the `schema.prisma` file, define your data source and generator, as well
// as your database models. The 'datasource' block configures the connection to
// your database and the 'generator' block tells Prisma to generate a client
datasource db {
  provider = "postgresql" // Specifies the database provider (e.g., postgresql, mysql, sqlite, sqlserver).
  url      = env("DATABASE_URL") // Connection URL to the database, stored as an environment variable for security.
}

// A 'generator' tells Prisma to generate a client for a specified language.
// Specifies the client language (in this case, JavaScript).
generator client {
  provider = "prisma-client-js"
}

// PRISMA: DEFINE YOUR DATABASE MODELS EXAMPLE ‚≠êÔ∏è
// Define your database models in the 'model' block. Models in Prisma correspond
// to tables in your database. Each field within a model, represents a column in
// the database table. Relationships between models (one-to-one, one-to-many) we 
// can define as well (see below).
// model Todo {
//   // 'id' field is unique and defaults to a cuid when a new Todo is created.
//   id          String  @unique @default(cuid())
//   title       String
//   description String? // The '?' denotes this field as optional.
// }

// PRISMA: SYNC YOUR MODELS WITH THE DATABASE (MIGRATE) ‚≠êÔ∏è
// To sync your models with the database (i.e., create the database tables), run
// `npx prisma migrate dev` command in your terminal. This generates & executes
// the necessary SQL migration files. Remember `DATABASE_URL` is and environment
// variable that should point to your actual database hosted in this case on an
// online service like railway.app üöÉ.

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// npx prisma migrate dev
// Environment variables loaded from .env
// Prisma schema loaded from prisma/schema.prisma
// Datasource "db": PostgreSQL database "railway", schema "public" at "containers-us-west-96.railway.app:7035"

// ‚úî Enter a name for the new migration: ‚Ä¶ added my todo model
// Applying migration `20230515104242_added_my_todo_model`

// The following migration(s) have been created and applied from new schema changes:

// migrations/
//   ‚îî‚îÄ 20230515104242_added_my_todo_model/
//     ‚îî‚îÄ migration.sql

// Your database is now in sync with your schema.

// ‚úî Generated Prisma Client (4.14.0 | library) to ./node_modules/@prisma/client
// in 108ms
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// NEXTAUTH: PRISMA ADAPTER FOR AUTHENTICATION (STEP 3) ‚≠êÔ∏è
// https://authjs.dev/reference/adapter/prisma
// See adapter setup from our pages/api/auth/[...nextauth].js route file.

// # Create the Prisma schema from scratch
// https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
// Create a schema file in prisma/schema.prisma similar to this one:
// This schema is adapted for use in Prisma and based upon our main schema
model User {
  id               String    @id @default(uuid())
  name             String
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// # Create the Prisma schema with prisma migrate
// https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-with-prisma-migrate
// This will create an SQL migration file and execute it: npx prisma migrate dev
// Note you need to specify your database connection string in the environment
// variable DATABASE_URL. Use the .env file at the root of your project.
